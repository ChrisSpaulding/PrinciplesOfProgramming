;this function will evaluated if the lkist is almost sorted. Assumes that list is only of numbers
(defun is-almost-sorted (lis)
    (cond 
         ((Sorted lis)
          nil)
        ( t (> (almost lis) (countI 0 lis)))
    )
)

;evaluates true for a list of numbers that is sorted from smallest to larges. 
(defun Sorted ( lis)
     (cond 
         ((null (cdr lis))
          t)
         ( (> (car lis) (car (cdr lis)))
            nil)
         (t
          (Sorted (cdr lis)))))

;evaluates how many inverstions are alowd for the list. 
(defun almost(lis)
    (* .2 (length lis)))

;counts how many inversions are present in the list. 
(defun countI (num lis)
      (cond 
         ((null (cdr lis))
          num)
         ( (> (car lis) (car (cdr lis)))
            (countI (+ num 1) (cdr lis)))
         (t
          (countI num (cdr lis)))
       )
)





(print (is-almost-sorted '(1 2 4 5 7 6 8 10 9 11 12)))
(print (is-almost-sorted '(1 2 3)))
(print (is-almost-sorted '(1 2 3 4 5 6 7 8 9 10)))
(print (is-almost-sorted '(1 2 3)))
(print (is-almost-sorted '(1 5 3)))
(print (is-almost-sorted '(1 4 3)))
(print (is-almost-sorted ()))